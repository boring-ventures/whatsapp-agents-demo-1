generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model customers {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  email      String?   @db.VarChar(255)
  phone      String?   @db.VarChar(20)
  address    String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    String?   @db.Uuid
  sales      sales[]
}

model inventory_movements {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id      String?   @db.Uuid
  movement_type   String    @db.VarChar(20)
  quantity_change Int
  previous_stock  Int
  new_stock       Int
  reference_id    String?   @db.Uuid
  notes           String?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  user_id         String?   @db.Uuid
  products        products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([product_id], map: "idx_inventory_movements_product_id")
}

model products {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(255)
  description         String?
  price               Decimal               @db.Decimal(10, 2)
  stock_quantity      Int                   @default(0)
  min_stock_level     Int?                  @default(5)
  category            String?               @db.VarChar(100)
  barcode             String?               @unique @db.VarChar(100)
  image_url           String?
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  user_id             String?               @db.Uuid
  inventory_movements inventory_movements[]
  sale_items          sale_items[]

  @@index([category], map: "idx_products_category")
  @@index([user_id], map: "idx_products_user_id")
}

model sale_items {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sale_id    String?   @db.Uuid
  product_id String?   @db.Uuid
  quantity   Int
  unit_price Decimal   @db.Decimal(10, 2)
  subtotal   Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sales      sales?    @relation(fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sale_id], map: "idx_sale_items_sale_id")
}

model sales {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id    String?      @db.Uuid
  total_amount   Decimal      @db.Decimal(10, 2)
  payment_method String?      @default("cash") @db.VarChar(50)
  notes          String?
  created_at     DateTime?    @default(now()) @db.Timestamptz(6)
  user_id        String?      @db.Uuid
  sale_items     sale_items[]
  customers      customers?   @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "idx_sales_created_at")
  @@index([user_id], map: "idx_sales_user_id")
}